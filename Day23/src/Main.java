public class Main {

    public static void main(String[] args) {

    }
}

/**JVM和类
 * 运行Java: Java带有main方法的类名
 * 启动jvm，并加载字节码
 *
 *
 *
 * 当调用java命令来运行某个Java程序时，该命令将会启动一个JVM进程，同一个JVM中的左右线程，变量都处于同一个进程中，共享JVM的内存区域
 *
 * 当出现以下情况时候，JVM会退出
 * 1：程序正常执行结束
 * 2：使用System.exit(0)
 * 3：出现异常时，没有捕获异常
 * 4：平台强制结束JVM进程
 *
 * JVM进程一旦结束，改进程中内存中的数据将会丢失
 *
 */


/**  类加载机制讲解
 * 加载           连接                                                    初始化
 *
 * 加载(Loading)->验证(Verification)->准备(Preparation)->解析(Resolution)->初始化(Initialization)->使用(Using)->卸载(UnLoading)
 *
 *当程序主动使用到某个类时,如果该类还未被加载进内存中,则系统会通过加载,连接,初始化三个步骤来对该类进行初始化操作.

 1):类的加载:
 类加载时指将类的class文件(字节码文件)载入内存中,并为之创建一个java.lang.Class对象,我们称之为字节码对象.
 类的加载过程由类加载器(ClassLoader)完成,类加载器通常有JVM提供,我们称之为系统类加载器,我们也可以继承ClassLoader类来提供自定义类加载器.
 不同的类加载器可以实现加载本地字节码文件,jar包中的字节码,通过网络加载字节码等.

 2):类的连接:
 当类被加载进内存之后,系统为之生产一个对应的Class对象,接着把类的二进制数据合并到JRE中.
 1>:验证:检测被加载的类是否有正确的内部结构.
 2>:准备:负责为类的static变量分配内存,并设置默认值.
 3>:解析:把类的二进制数据中的符号引用替换为直接引用(深入分析JVM).

 3):类的初始化:
 在此阶段,JVM负责对类进行初始化,主要就是对static变量进行初始化.
 类的初始化一个类包含以下几个步骤:
 1>:如果该类还未被加载和连接,则程序先加载并连接该类.
 2>:如果该类的直接父类还未被初始化,则先初始化其父类.
 3>:如果类中有初始化语句(静态代码块),则系统依次执行这些初始化语句.
 ----------------------------------------
 符号引用:
 符号引用是一个字符串，它给出了被引用的内容的名字并且可能会包含一些其他关于这个被引用项的信息——这些信息必须足以唯一的识别一个类、字段、方法。
 这样，对于其他类的符号引用必须给出类的全名。

 类一旦加载进虚拟机，就永远不会卸载，除非虚拟机停止了
 */

/** 反射机制
 *问题1:
 1.对象有编译类型和运行类型
 Object    obj  =  new java.util.Date();
 编译类型:  Object 声明对象的类型
 运行类型:  java.util.Date 对象的真实类型
 需求:通过obj对象,调用java.util.Date类中的toLocaleString方法.
 obj.toLocaleString();  此时编译报错, 编译时,会检查该编译类型中是否存在toLocaleString方法.
 如果存在,编译成功,否则编译失败.
 解决方案,因为obj的真实类型是java.util.Date类,所以我们可以把obj对象强制转换为java.util.Date类型.
 java.util.Date d = (java.util.Date)obj;
 d.toLocaleString();//调用成功
 如果不知道obj的真实类型,就不能强转.(底层有一个方法,返回一个Object类型的java.util.Date对象).
 此时问题如何解决?

 问题2:
一切事物都可以看成是对象,那么问题来了,类这种事物是啥对象呢?
 *
 *
 */

/** 类一旦加载进内存，就会变成Class对象(字节码对象)
 *
 * 元数据(metadata)：描述数据的描述数据
 * 反射：得到类的元数据的过程，在运行时期，动态的去获取某一个类中的成员信息(构造器，方法，字段，内部类，接口，父类)
 * 并把类中的每一种成员，都描述成一个新的类
 * 所有的类都可以有构造器、方法、字段、内部类、父类、接口、包
 *
 * Class类: 表示所有的类
 * Constructor: 表示所有的构造器
 * Method:表示所有的方法
 * Field:表示所有的字段
 *
 */


/**
 * Class类：用来描述类或者接口的类型，描述类的类
 * Class 类的实例，在JVM中的一份份字节码，表示正在运行的Java应用程序的类和接口 枚举是一种特殊的类，注解是一种特殊的接口
 *
 * 当程序第一次使用某一个类的时候，就会把该类的字节码对象加载进JVM，并创建出一个Class对象
 * 此时的class对象就表示java.util.Date的字节码
 * Class类可以表示N个类的字节码对象。
 * Class提供了泛型，来区分Class类此时表示的那一个类的字节码 Class<T>
 *
 *
 *
 */
